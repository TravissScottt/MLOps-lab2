pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS = credentials('travissscottt-dockerhub')
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }

    stages {

        stage('Clone Repository') {
            steps {
                cleanWs()
                sh 'git clone -b master https://github.com/TravissScottt/MLOps-lab2.git'
            }
        }

        stage('Add config_secret.ini') {
            steps {
                dir('MLOps-lab2') {
                    withCredentials([file(credentialsId: 'config_secret', variable: 'SECRET_FILE')]) {
                        sh '''
                            cp "$SECRET_FILE" config_secret.ini
                            echo "Contents of MLOps-lab2 dir after adding secret:"
                            ls -la
                        '''
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('MLOps-lab2') {
                    sh '''
                        bash -c "
                            source /home/dolmachi/miniconda3/etc/profile.d/conda.sh &&
                            conda activate mlops &&
                            pytest src/unit_tests --cov=src --disable-warnings
                        "
                    '''
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                sh 'docker login -u $DOCKERHUB_CREDS_USR -p $DOCKERHUB_CREDS_PSW'
            }
        }

        stage('Build and Run Docker Container') {
            steps {
                script {
                    dir('MLOps-lab2') {
                        sh 'docker compose build'
                        sh 'docker compose up -d'
                    }
                }
            }
        }

        stage('Check Container Logs') {
            steps {
                dir("MLOps-lab2") {
                    sh '''
                        container_id=$(docker ps -qf "name=api_container")
                        if [ -z "$container_id" ]; then
                            echo "No container running"
                            exit 1
                        fi
                        docker logs --tail 1000 "$container_id"
                    '''
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                dir('MLOps-lab2') {
                    sh '''
                        image_id=$(docker images -q travissscottt/api_car_price_2:latest)
                        if [ -z "$image_id" ]; then
                            echo "Error: Docker image not found. Build might have failed."
                            exit 1
                        fi
                        docker push travissscottt/api_car_price_2:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker stop api_container || true
                docker rm api_container || true
                docker stop mongodb_container || true
                docker rm mongodb_container || true
                docker rmi travissscottt/api_car_price_2:latest || true
                docker rmi mongo:5.0 || true
                docker logout || true
            '''
            cleanWs()
        }
    }
}
